using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Reflection;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using AjaxControlToolkit;
using Nat.DataControls;
using Nat.Tools;
using Nat.Tools.QueryGeneration;
using Nat.Web.Controls.Properties;
using Nat.Web.Tools;

[assembly: WebResource("Nat.Web.Controls.GridView.GridStyle.css", "text/css", PerformSubstitution = true)]
[assembly: WebResource("Nat.Web.Controls.GridView.GridViewExtRowExpand.js", "text/javascript", PerformSubstitution = true)]
[assembly: WebResource("Nat.Web.Controls.GridView.CheckedField.js", "text/javascript", PerformSubstitution = true)]

namespace Nat.Web.Controls
{
    [ClientCssResource("Nat.Web.Controls.GridView.GridStyle.css")]
    [ClientScriptResource("Nat.Web.Controls.GridView.CheckedField", "Nat.Web.Controls.GridView.CheckedField.js")]
    [ClientScriptResource("Nat.Web.Controls.GridView.GridViewExtRowExpand", "Nat.Web.Controls.GridView.GridViewExtRowExpand.js")]
    public class GridViewExt : GridView, IScriptControl
    {
        #region reflection
        private static readonly PropertyInfo SortExpressionInternal =
            typeof(GridView).GetProperty("SortExpressionInternal", BindingFlags.NonPublic | BindingFlags.Instance);

        private static readonly PropertyInfo SortDirectionInternal =
            typeof(GridView).GetProperty("SortDirectionInternal", BindingFlags.NonPublic | BindingFlags.Instance);
        

        private static readonly FieldInfo fieldInfo_row = typeof(GridViewCommandEventArgs).GetField("_row", BindingFlags.NonPublic | BindingFlags.Instance);

        private static readonly MethodInfo methodInfoBuildCallbackArgument =
            typeof(GridView).GetMethod("BuildCallbackArgument", BindingFlags.NonPublic | BindingFlags.Instance,
                                       null,
                                       new Type[]{ typeof(int) }, null);

        #endregion


        #region поля

//        private const string EditCommand = "Edit$";
        private const string SelectCommand = "Select$";
        private const string deleteFieldColumnName = "cfDelete";
        private bool _requiresDataBinding;
        private bool _setEditIndex = true;

        private TableDataSourceView _view;
        private bool _viewFinded;
        private bool afterPreRender;
        private bool changingIndex;
        private bool dataBound;
        private bool ensureDataBoundOnIndexChange;
        private ColumnIndexer _columnIndexer;
        private int rowIndexForCommand = -1; // Индекс строки, при выполнении комманды (во время события RowCommand)
        private bool useEnsureDataBoundExt = true;
        private bool allowLocalizationDicColumns = true;
        private bool needReloadDataOnEvent;

        #endregion


        # region конструктор

        public GridViewExt()
        {
            base.AllowSorting = true;
            base.AllowPaging = true;
            base.EmptyDataText = Resources.SEmptyDataText;
        }

        # endregion


        #region свойства


        #region public

        ///<summary>
        ///Gets or sets a value indicating whether a <see cref="T:System.Web.UI.WebControls.CommandField"></see> field column with a Select button for each data row is automatically added to a <see cref="T:System.Web.UI.WebControls.GridView"></see> control.
        ///</summary>
        ///
        ///<returns>
        ///true to automatically add a <see cref="T:System.Web.UI.WebControls.CommandField"></see> field column with a Select button for each data row; otherwise, false. The default is false.
        ///</returns>
        [Browsable(false)]
        public override bool AutoGenerateSelectButton
        {
            get { return base.AutoGenerateSelectButton; }
            set { base.AutoGenerateSelectButton = value; }
        }

        [Browsable(false)]
        public override bool AutoGenerateDeleteButton
        {
            get { return base.AutoGenerateDeleteButton; }
            set { base.AutoGenerateDeleteButton = value; }
        }

        [DefaultValue(true)]
        [Description("Разрешить локализацию справочных колонок")]
        public bool AllowLocalizationDicColumns
        {
            get { return allowLocalizationDicColumns; }
            set { allowLocalizationDicColumns = value; }
        }

        [Category("Behavior")]
        [DefaultValue(false)]
        public bool ConfirmDelete
        {
            get { return (bool?)ViewState["ConfirmDelete"] ?? false; }
            set { ViewState["ConfirmDelete"] = value; }
        }

        [Category("Behavior")]
        [DefaultValue(ButtonType.Link)]
        public ButtonType DeleteButtonType
        {
            get
            {
                if(ViewState["_deleteButtonType"] == null) return ButtonType.Link;
                return (ButtonType)ViewState["_deleteButtonType"];
            }
            set { ViewState["_deleteButtonType"] = value; }
        }

        [Category("Behavior")]
        [DefaultValue(false)]
        public bool EnsureDataBoundOnIndexChange
        {
            get { return ensureDataBoundOnIndexChange; }
            set { ensureDataBoundOnIndexChange = value; }
        }

        [DefaultValue(true)]
        public bool SetEditIndex
        {
            get { return _setEditIndex; }
            set { _setEditIndex = value; }
        }

        [Category("Behavior")]
        [DefaultValue(false)]
        public bool EnableRowSelect
        {
            get { return (bool?)ViewState["EnableRowSelect"] ?? false; }
            set { ViewState["EnableRowSelect"] = value; }
        }

        [Category("Styles")]
        [Description("Использовать CustomPagerStyle")]
        [DefaultValue(false)]
        public bool UseCustomPager
        {
            get { return (bool?)ViewState["UseCustomPager"] ?? false; }
            set { ViewState["UseCustomPager"] = value; }
        }

        [Category("Styles")]
        [DefaultValue(true)]
        [Description("Использовать стиль по умолчанию")]
        public bool UseDefaultCssStyle
        {
            get { return (bool?)ViewState["UseDefaultCssStyle"] ?? true; }
            set { ViewState["UseDefaultCssStyle"] = value; }
        }

        [DefaultValue(true)]
        public override bool AllowSorting
        {
            get { return base.AllowSorting; }
            set { base.AllowSorting = value; }
        }

        [Category("Behavior")]
        [DefaultValue(true)]
        public bool UseEnsureDataBoundExt
        {
            get { return useEnsureDataBoundExt; }
            set { useEnsureDataBoundExt = value; }
        }

        public override int SelectedIndex
        {
            get { return base.SelectedIndex; }
            set
            {
                if(changingIndex || TableDataSourceView == null || SetTableDataSourceViewCurrentIndex(value))
                    base.SelectedIndex = value;
            }
        }

        public override int PageIndex
        {
            get { return base.PageIndex; }
            set
            {
                base.PageIndex = value;
                if(AllowPaging) SetTableDataSourceViewCurrentIndex(SelectedIndex);
            }
        }

        [DefaultValue(true)]
        public override bool AllowPaging
        {
            get { return base.AllowPaging; }
            set
            {
//                if(ShowAsTree && value) throw new Exception("ShowAsTree и AllowPaging вместе запрещены.");
                base.AllowPaging = value;
            }
        }

        [DefaultValue(false)]
        [Category("Behavior")]
        [Description("Разрешить переключение DataMode у TableDataSource")]
        public bool AllowChangeDataMode
        {
            get { return (bool?)ViewState["_allowChangeDataMode"] ?? false; }
            set { ViewState["_allowChangeDataMode"] = value; }
        }

        [DefaultValue(true)]
        [Category("Behavior")]
        [Description("Разрешить изменение строки редактирования")]
        public bool AllowSetEditIndex
        {
            get { return (bool?)ViewState["_allowSetEditIndex"] ?? true; }
            set { ViewState["_allowSetEditIndex"] = value; }
        }

        [DefaultValue(true)]
        [Category("Behavior")]
        public bool UseDeleteField
        {
            get { return (bool?)ViewState["_useDeleteField"] ?? true; }
            set { ViewState["_useDeleteField"] = value; }
        }

        [Browsable(false)]
        public string DeleteFieldColumnName
        {
            get { return deleteFieldColumnName; }
        }

        [DefaultValue("")]
        public string DeleteFieldColumnCaption
        {
            get { return (String)(ViewState["DeleteFieldColumnCaption"] ?? ""); }
            set { ViewState["DeleteFieldColumnCaption"] = value; }
        }

        [DefaultValue(-1)]
        public int MaximumLevelNewRow
        {
            get { return (int?)ViewState["MaximumLevelAdd"] ?? -1; }
            set { ViewState["MaximumLevelAdd"] = value; }
        }

        /// <summary>
        /// Перезагружать данные на события: редактировать, отмена, сохранить, удалить.
        /// </summary>
        [DefaultValue(false)]
        public bool ReloadDataOnEvent { get; set; }

        #endregion

        [DefaultValue(false)]
        public bool PostBackOnExpnad
        {
            get { return (bool?)ViewState["_postBackOnExpnad"] ?? false; }
            set { ViewState["_postBackOnExpnad"] = value; }
        }

        private TableDataSourceView TableDataSourceView
        {
            get
            {
                if(!_viewFinded)
                {
                    _view = GetData() as TableDataSourceView;
                    _viewFinded = true;
                }
                return _view;
            }
        }

        private ScriptManager CurrentScriptManager
        {
            get
            {
                ScriptManager sm = ScriptManager.GetCurrent(Page);

                if(sm == null)
                {
                    throw new InvalidOperationException(
                        string.Format(CultureInfo.InvariantCulture,
                                      "The control with ID '{0}' requires a ScriptManager on the page. The ScriptManager must appear before any controls that need it.",
                                      new object[]{ ID }));
                }
                return sm;
            }
        }

        public Dictionary<string, int> GridColumnIndexes
        {
            get
            {
                if(_columnIndexer == null)
                {
                    _columnIndexer = new ColumnIndexer(Columns);
                }
                return _columnIndexer.GridColumnIndexes;
            }
        }

        #endregion


        #region Virtual methods

        protected virtual void CreateCustomPager(GridViewRow row, int columnSpan, PagedDataSource pagedDataSource)
        {
            int pageCount = pagedDataSource.PageCount;
            int pageIndex = pagedDataSource.CurrentPageIndex + 1;
            int pageButtonCount = PagerSettings.PageButtonCount;

            TableCell cell = new TableCell();
            row.Cells.Add(cell);
            if(columnSpan > 1) cell.ColumnSpan = columnSpan;

            if(pageCount > 1)
            {
                HtmlGenericControl pager = new HtmlGenericControl("div");

                pager.Attributes["class"] = "pagination";
                cell.Controls.Add(pager);

                int min = pageIndex - pageButtonCount;
                int max = pageIndex + pageButtonCount;

                if(max > pageCount)
                    min -= max - pageCount;
                else if(min < 1)
                    max += 1 - min;

                // Create "previous" button
                Control page = pageIndex > 1
                                   ? BuildLinkButton(pageIndex - 2, PagerSettings.PreviousPageText, "Page", "Prev")
                                   : BuildSpan(PagerSettings.PreviousPageText, "disabled");
                pager.Controls.Add(page);

                // Create page buttons
                bool needDiv = false;
                for(int i = 1; i <= pageCount; i++)
                {
                    if(i <= 2 || i > pageCount - 2 || (min <= i && i <= max))
                    {
                        string text = i.ToString(NumberFormatInfo.InvariantInfo);
                        page = i == pageIndex
                                   ? BuildSpan(text, "current")
                                   : BuildLinkButton(i - 1, text, "Page", text);
                        pager.Controls.Add(page);
                        needDiv = true;
                    }
                    else if(needDiv)
                    {
                        page = BuildSpan("&hellip;", null);
                        pager.Controls.Add(page);
                        needDiv = false;
                    }
                }

                // Create "next" button
                page = pageIndex < pageCount
                           ? BuildLinkButton(pageIndex, PagerSettings.NextPageText, "Page", "Next")
                           : BuildSpan(PagerSettings.NextPageText, "disabled");
                pager.Controls.Add(page);
            }
        }

        public virtual void DeleteRows()
        {
            DeleteRows(deleteFieldColumnName);
        }

        public virtual void DeleteRows(string columnNameDelete)
        {
            IGridColumn gridColumn = GetIGridColumn(columnNameDelete);
            if(gridColumn == null) throw new ArgumentException("Не существует колонка", "columnNameDelete");
            CheckedField chk = gridColumn as CheckedField;
            if(chk == null) throw new ArgumentException("Колонка не наследована от типа CheckedField", "columnNameDelete");
            bool[] values = chk.GetCheckedValues(this);
            for(int i = 0; i < values.Length; i++)
                if(values[i]) DeleteRow(i);
        }

        public DataKey[] GetSelectedDataKeys(string columnName)
        {
            List<DataKey> dataKeys = new List<DataKey>();
            if (UseDeleteField)
            {
                IGridColumn gridColumn = GetIGridColumn(columnName);
                if (gridColumn == null) throw new ArgumentException("Не существует колонка", "columnName");
                CheckedField chk = gridColumn as CheckedField;
                if (chk == null) throw new ArgumentException("Колонка не наследована от типа CheckedField", "columnName");
                bool[] values = chk.GetCheckedValues(this);
                for (int i = 0; i < values.Length; i++)
                {
                    if (values[i])
                    {
                        dataKeys.Add(DataKeys[i]);
                    }
                }
            }
            return dataKeys.ToArray();
        }

        [Browsable(false)]
        public DataKey[] SelectedDataKeys
        {
            get
            {
                return GetSelectedDataKeys(deleteFieldColumnName);
            }
        }

        #endregion


        #region публичные методы

        public IGridColumn GetIGridColumn(string columnName)
        {
            if(GridColumnIndexes.ContainsKey(columnName))
                return Columns[GridColumnIndexes[columnName]] as IGridColumn;
            else
                return null;
        }

        public IColumnName GetColumnName(string columnName)
        {
            if(GridColumnIndexes.ContainsKey(columnName))
                return Columns[GridColumnIndexes[columnName]] as IColumnName;
            else
                return null;
        }

        public T GetColumn<T>(string columnName) where T : class
        {
            if(GridColumnIndexes.ContainsKey(columnName))
                return Columns[GridColumnIndexes[columnName]] as T;
            else
                return null;
        }

        public BoundField GetBoundField(string dataField)
        {
            if (GridColumnIndexes.ContainsKey(dataField))
                return Columns[GridColumnIndexes[dataField]] as BoundField;
            else
                return null;
        }

        #endregion


        #region Private methods

//        private void RefreshColumns()
//        {
//            gridColumnIndexes.Clear();
//            for(int i = 0; i < Columns.Count; i++)
//            {
//                IGridColumn column = Columns[i] as IGridColumn;
//                if(column != null)
//                {
//                    if(gridColumnIndexes.ContainsKey(column.ColumnName))
//                        throw new Exception(string.Format("Созданы 2 колонки с одинаковым названием '{0}'", column.ColumnName));
//                    gridColumnIndexes.Add(column.ColumnName, i);
//                }
//                BoundField boundColumn = Columns[i] as BoundField;
//                if(boundColumn != null)
//                {
//                    if(gridColumnIndexes.ContainsKey(boundColumn.DataField))
//                        throw new Exception(string.Format("Созданы 2 колонки с одинаковым названием '{0}'", boundColumn.DataField));
//                    gridColumnIndexes.Add(boundColumn.DataField, i);
//                }
//            }
//        }
//
//        private void Columns_OnFieldsChanged(object sender, EventArgs e)
//        {
//            RefreshColumns();
//        }

        private bool SetTableDataSourceViewCurrentIndex(int index)
        {
            if(TableDataSourceView == null || changingIndex) return false;

            if(!UpdateCurrentRow()) return false;

            int newIndex;
            if(!showAsTree)
            {
                newIndex = index;
                if(index > -1)
                {
                    if(AllowPaging && !TableDataSourceView.EnablePaging)
                        newIndex = index + PageIndex * PageSize;
                    else newIndex = index;
                }
                if(TableDataSourceView.DataView.Count <= newIndex)
                    newIndex = TableDataSourceView.DataView.Count - 1;
                try
                {
                    TableDataSourceView.CurrentIndex = newIndex;
                }
                catch(IndexOutOfRangeException)
                {
                    return false;
                }
            }
            else
            {
                if (index < 0 || DataKeys.Count <= index)
                {
                    newIndex = -1;
                    TableDataSourceView.CurrentIndex = -1;
                }
                else
                {
                    DataRow row = FindHelper.FindRow(DataKeys[index].Values, TableDataSourceView.Table);
                    try
                    {
                        newIndex = TableDataSourceView.SetCurrentRow(row);
                    }
                    catch(IndexOutOfRangeException)
                    {
                        return false;
                    }
                }
            }
            return TableDataSourceView.CurrentIndex == newIndex;
        }

        private bool UpdateCurrentRow()
        {
            if((TableDataSourceView.HasNewRow || TableDataSourceView.IsEditRow) && EditIndex > -1)
            {
                UpdateRow(EditIndex, false);
                if(EditIndex > -1) return false;
            }
            return true;
        }

        private void SetSelectedIndexByTableDataSourceView()
        {
            if(TableDataSourceView == null || changingIndex) return;
            changingIndex = true;
            try
            {
                if(ensureDataBoundOnIndexChange) EnsureDataBoundExt();
                if(TableDataSourceView.Current == null)
                {
                    SelectedIndex = -1;
                    return;
                }
                if(showAsTree)
                {
                    int index = GetRowIndexByRow(TableDataSourceView.Current.Row);
                    PageIndex = index / PageSize;
                    SelectedIndex = index % PageSize;
                }
                else if(AllowPaging && !TableDataSourceView.EnablePaging)
                {
                    PageIndex = TableDataSourceView.CurrentIndex / PageSize;
                    SelectedIndex = TableDataSourceView.CurrentIndex % PageSize;
                }
                else
                    SelectedIndex = TableDataSourceView.CurrentIndex;
            }
            finally
            {
                changingIndex = false;
            }
        }

        private int GetRowIndexByRow(DataRow row)
        {
            if (row == null) return -1;
            if (AllowPaging)
            {
                if (bindingSource == null) return SelectedIndex;
                TreeRow treeRow = bindingSource.FindRow(row);
                int index = treeRow.Parent.Childs.IndexOf(treeRow);
                treeRow = treeRow.Parent;
                while (treeRow.Row != null)
                {
                    index++;
                    treeRow = treeRow.Parent;
                }
                return index;
            }
            else
            {
                OrderedDictionary keyTable = new OrderedDictionary();
                foreach (string keyName in DataKeyNames)
                    keyTable.Add(keyName, row[keyName]);
                DataKey key = new DataKey(keyTable);
                return GetRowIndexByKey(key);
            }
        }

        public int GetRowIndexByKey(object[] keys)
        {
            OrderedDictionary keyTable = new OrderedDictionary();
            int i = 0;
            foreach(string keyName in DataKeyNames)
                keyTable.Add(keyName, keys[i++]);
            DataKey key = new DataKey(keyTable);
            return GetRowIndexByKey(key);
        }

        public int GetRowIndexByKey(DataKey key)
        {
            return GetRowIndexByKey(key, DataKeys, DataKeyNames);
        }

        private void CssApply(bool UseClassicalStyle)
        {
            if(UseClassicalStyle)
            {
                CssClass = "ms-vb";
                HeaderStyle.CssClass = "ms-vh";
                PagerStyle.CssClass = "ms-vh2";
                RowStyle.CssClass = "ms-vb";
                //                RowStyle.CssClass = "ms-stylebody";
                //                EditRowStyle.CssClass = "GridRowEdit";
                AlternatingRowStyle.CssClass = "ms-alternating";
                SelectedRowStyle.CssClass = "ms-selected";
                //                SelectedRowStyle.CssClass = "ms-vb";
                //                SelectedRowStyle.ForeColor = Color.Blue;
                GridLines = GridLines.None;
            }
        }

        private Control BuildLinkButton(int pageIndex, string text, string commandName, string commandArgument)
        {
            PagerLinkButton link = new PagerLinkButton(this);
            link.Text = text;
            link.EnableCallback(ParentBuildCallbackArgument(pageIndex));
            link.CommandName = commandName;
            link.CommandArgument = commandArgument;
            return link;
        }

        private static Control BuildSpan(string text, string cssClass)
        {
            HtmlGenericControl span = new HtmlGenericControl("span");
            if(!String.IsNullOrEmpty(cssClass)) span.Attributes["class"] = cssClass;
            span.InnerHtml = text;
            return span;
        }

        private string ParentBuildCallbackArgument(int pageIndex)
        {
            return (string)methodInfoBuildCallbackArgument.Invoke(this, new object[]{ pageIndex });
        }

        private void CommandOnGridViewClick(GridViewRow row, string EnabledCommand)
        {
            if(row.RowType == DataControlRowType.DataRow)
            {
                if(Page != null)
                {
                    row.Attributes["onclick"] =
                        Page.ClientScript.GetPostBackClientHyperlink
                            (this, EnabledCommand + row.RowIndex);
                }
            }
        }

        private void OnPreRenderComplete(object sender, EventArgs e)
        {
            afterPreRender = true;
        }

        private void TableDataSourceView_OnCurrentChanged(object sender, CurrentChangeEventArgs e)
        {
            if(TableDataSourceView.DataMode != TableDataSourceDataMode.All)
                _requiresDataBinding = true;
            if(!(TableDataSourceView.DataMode == TableDataSourceDataMode.OnlyCurrent ||
                 (TableDataSourceView.DataMode == TableDataSourceDataMode.CurrentOrAll && e.NewCurrentIndex > -1)))
            {
                SetSelectedIndexByTableDataSourceView();
//                if (TableDataSourceView.HasNewRow) _requiresDataBinding = true;
            }
        }

        private void Table_OnRowChanged(object sender, DataRowChangeEventArgs e)
        {
            if(afterPreRender) return;
            _requiresDataBinding = true;
        }

        private GridViewPageEventArgs gridViewPageEventArgs;

        private void this_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            if (TableDataSourceView != null && (TableDataSourceView.HasNewRow || TableDataSourceView.IsEditRow))
            {
                if(!UpdateCurrentRow()) e.Cancel = true;
            }
            gridViewPageEventArgs = e;
        }

        private void this_PageIndexChanged(object sender, EventArgs e)
        {
            if(AllowPaging) SetTableDataSourceViewCurrentIndex(SelectedIndex);
            // For some reason GridView doesn't set PageIndex 
            // when we use DataSource instead of DataSourceID to bind data
            // Therefore set it here
            if (!IsBoundUsingDataSourceID)
                PageIndex = gridViewPageEventArgs.NewPageIndex;
        }

        #endregion


        #region override methods

        protected override void OnUnload(EventArgs e)
        {
            base.OnUnload(e);

            if (bindingSource != null)
            {
                bindingSource.Dispose();
                bindingSource = null;
            }

            if (_view != null)
            {
                _view.Table.RowChanged -= Table_OnRowChanged;
            }
        }

        protected override void OnInit(EventArgs e)
        {
            CreateNewColumnForTree();
            CreateCheckedColumn();
            CreateEmptyColumnForTree();
            base.OnInit(e);
            PageIndexChanging += this_PageIndexChanging;
            PageIndexChanged += this_PageIndexChanged;
            Sorting += SortingHandler;
        }

        private void SortingHandler(object sender, GridViewSortEventArgs e)
        {
            EditIndex = -1;
            SortExpressionInternal.SetValue(this, e.SortExpression, null);
            SortDirectionInternal.SetValue(this, e.SortDirection, null);
            PageIndex = 0;
            RequiresDataBinding = true;
        }

        internal void EnsureDataBoundInternal()
        {
            EnsureDataBound();
        }

        protected virtual void EnsureDataBoundExt()
        {
            if(_requiresDataBinding)
            {
                if(!RequiresDataBinding && !afterPreRender && !dataBound)
                {
                    if(AllowChangeDataMode && TableDataSourceView != null)
                    {
                        _previouseDataMode = TableDataSourceView.DataMode;
                        TableDataSourceView.DataMode = TableDataSourceDataMode.All;
                    }
                    _requiresDataBinding = false;
                    try
                    {
                        RequiresDataBinding = true;
                    }
                    finally
                    {
                        if(AllowChangeDataMode && TableDataSourceView != null)
                            TableDataSourceView.DataMode = _previouseDataMode;
                    }
                }
            }
        }

        protected override void EnsureDataBound()
        {
            // В RequiresDataBinding если не IsPostBack, то сразу вызывается EnsureDataBound().
            EnsureDataBoundExt();
            if(AllowChangeDataMode && TableDataSourceView != null)
            {
                _previouseDataMode = TableDataSourceView.DataMode;
                TableDataSourceView.DataMode = TableDataSourceDataMode.All;
            }
            try
            {
                base.EnsureDataBound();
            }
            finally
            {
                if(AllowChangeDataMode && TableDataSourceView != null)
                    TableDataSourceView.DataMode = _previouseDataMode;
            }
        }

        protected override void DataBind(bool raiseOnDataBinding)
        {
            TableDataSourceFillType previouseType = TableDataSourceView.FillType;
            if(TableDataSourceView != null && needReloadDataOnEvent)
                TableDataSourceView.FillType = TableDataSourceFillType.Always;
            try
            {
                base.DataBind(raiseOnDataBinding);
            }
            finally
            {
                if (TableDataSourceView != null && needReloadDataOnEvent)
                {
                    needReloadDataOnEvent = false;
                    TableDataSourceView.FillType = previouseType;
                }
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            if(TableDataSourceView != null)
            {
                if(TableDataSourceView.Table == null)
                {
                    if(string.IsNullOrEmpty(TableDataSourceView.SessionWorkerControl))
                        throw new Exception("TableDataSourceView.SessionWorkerControl is null");
                    if(TableDataSourceView.SessionWorker == null)
                        throw new Exception("TableDataSourceView.SessionWorker is null");
                }
                if(useEnsureDataBoundExt)
                {
                    Page.PreRenderComplete += OnPreRenderComplete;
                    TableDataSourceView.Table.RowChanged += Table_OnRowChanged;
                    TableDataSourceView.CurrentChanged += TableDataSourceView_OnCurrentChanged;
                }
            }
            ScriptObjectBuilder.RegisterCssReferences(this);
            base.OnLoad(e);
        }

        protected override void OnDataBound(EventArgs e)
        {
            if(TableDataSourceView != null)
            {
                SetSelectedIndexByTableDataSourceView();

                if(_setEditIndex && TableDataSourceView != null && TableDataSourceView.HasNewRow && AllowSetEditIndex)
                {
                    if(TableDataSourceView.DataMode == TableDataSourceDataMode.All)
                        EditIndex = SelectedIndex;
                    else EditIndex = 0;
                }
                dataBound = true;
            }
            base.OnDataBound(e);
        }

        protected override void OnRowCancelingEdit(GridViewCancelEditEventArgs e)
        {
            if(TableDataSourceView != null && AllowSetEditIndex) TableDataSourceView.CancelEdit();
            base.OnRowCancelingEdit(e);
            if(!e.Cancel) needReloadDataOnEvent = true;
        }

        protected override void OnRowUpdated(GridViewUpdatedEventArgs e)
        {
            if(TableDataSourceView != null && AllowSetEditIndex) TableDataSourceView.EndEdit();
            needReloadDataOnEvent = true;
            base.OnRowUpdated(e);
        }

        protected override void OnRowDeleted(GridViewDeletedEventArgs e)
        {
            needReloadDataOnEvent = true;
            base.OnRowDeleted(e);
        }

        protected override void OnRowEditing(GridViewEditEventArgs e)
        {
            base.OnRowEditing(e);
            if(TableDataSourceView != null && !e.Cancel)
            {
                if(!AllowSetEditIndex) SetTableDataSourceViewCurrentIndex(e.NewEditIndex);
                else
                {
                    if(!e.Cancel) e.Cancel = !SetTableDataSourceViewCurrentIndex(e.NewEditIndex);
                    if(!e.Cancel) TableDataSourceView.BeginEdit();
                }
                needReloadDataOnEvent = false;
            }
        }

        ///<summary>
        ///Initializes the pager row displayed when the paging feature is enabled.
        ///</summary>
        ///
        ///<param name="columnSpan">The number of columns the pager row should span. </param>
        ///<param name="row">A <see cref="T:System.Web.UI.WebControls.GridViewRow"></see> that represents the pager row to initialize. </param>
        ///<param name="pagedDataSource">A <see cref="T:System.Web.UI.WebControls.PagedDataSource"></see> that represents the data source. </param>
        protected override void InitializePager(GridViewRow row, int columnSpan, PagedDataSource pagedDataSource)
        {
            if(UseCustomPager)
                CreateCustomPager(row, columnSpan, pagedDataSource);
            else
                base.InitializePager(row, columnSpan, pagedDataSource);
        }

        ///<summary>
        ///Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowDataBound"></see> event.
        ///</summary>
        ///
        ///<param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewRowEventArgs"></see> that contains event data.</param>
        protected override void OnRowDataBound(GridViewRowEventArgs e)
        {
            base.OnRowDataBound(e);
            if(EnableRowSelect && EditIndex == -1)
            {
                CommandOnGridViewClick(e.Row, SelectCommand);
                e.Row.Attributes["onmouseover"] = "this.style.cursor=\"hand\";";
                e.Row.Attributes["onmouseout"] = "this.style.cursor=\"\";";
            }
        }

        protected override void OnPreRender(EventArgs e)
        {
            var scriptManager = ScriptManager.GetCurrent(Page);
            if (scriptManager != null)
                scriptManager.RegisterScriptControl(this);
            CssApply(UseDefaultCssStyle);
            OnPreRenderTree(e);
            base.OnPreRender(e);
        }

        #endregion


        #region Nested type: PagerLinkButton

        public class PagerLinkButton : LinkButton
        {
            #region Private fields

            private readonly IPostBackContainer _container;
            private string _callbackArgument;
            private bool _enableCallback;

            #endregion


            public PagerLinkButton(IPostBackContainer container)
            {
                _container = container;
            }

            public override bool CausesValidation
            {
                get { return false; }
                set { throw new ApplicationException("Cannot set validation on pager buttons"); }
            }

            protected override void Render(HtmlTextWriter writer)
            {
                SetCallbackProperties();
                base.Render(writer);
            }

            public void EnableCallback(string argument)
            {
                _enableCallback = true;
                _callbackArgument = argument;
            }


            private void SetCallbackProperties()
            {
                if(_enableCallback)
                {
                    ICallbackContainer container = _container as ICallbackContainer;
                    if(container != null)
                    {
                        string callbackScript = container.GetCallbackScript(this, _callbackArgument);
                        if(!string.IsNullOrEmpty(callbackScript)) OnClientClick = callbackScript;
                    }
                }
            }
        }


        #region TreeGrid


        #region поля

//        private Hashtable _baseList;
        private string _collapseButtonCssClass = "";
        private string _collapseButtonText = "–";
//        private List<DataRowView> _data;
        private IList _data;
        private string _expandButtonCssClass = "";
        private string _expandButtonText = "+";
        private TableDataSourceDataMode _previouseDataMode;
        private Dictionary<string, TemplateExpand> _stateRows;
        private TreeBindingSource bindingSource;
        private bool created = false;
//        private Dictionary<DataKey, ExpandTableCell> _stateRows;
//        private DataKeyArray _keys;
        private string idColumn = "id";
        private string parentColumn = "refParent";
        private string parentFindField = "";
        private string parentFindFieldValue = "";
        private string relationName = "";
        private bool showAsTree = false;
        private List<TreeRow> treeRowsExpanded;

        #endregion


        #region public properties

        /// <summary>
        /// Sets or gets the CSS class which is applied on the expand button control.
        /// </summary>
        [Category("Styles")]
        [DefaultValue("")]
        public String ExpandButtonCssClass
        {
            get { return _expandButtonCssClass; }
            set { _expandButtonCssClass = value; }
        }

        /// <summary>
        /// Sets or gets the CSS class which is applied on the collapse button control.
        /// </summary>
        [Category("Styles")]
        [DefaultValue("")]
        public String CollapseButtonCssClass
        {
            get { return _collapseButtonCssClass; }
            set { _collapseButtonCssClass = value; }
        }

        /// <summary>
        /// Sets or gets the expand button's text.
        /// </summary>
        [Category("Appearance")]
        [DefaultValue("+")]
        public String ExpandButtonText
        {
            get { return _expandButtonText; }
            set { _expandButtonText = value; }
        }

        /// <summary>
        /// Sets or gets the collapse button's text.
        /// </summary>
        [Category("Appearance")]
        [DefaultValue("–")]
        public String CollapseButtonText
        {
            get { return _collapseButtonText; }
            set { _collapseButtonText = value; }
        }

        [Category("Behavior")]
        [DefaultValue(false)]
        public bool ShowAsTree
        {
            get { return showAsTree; }
            set
            {
//                if(AllowPaging && value) throw new Exception("ShowAsTree и AllowPaging вместе запрещены.");
                showAsTree = value;
            }
        }

        [Category("Behavior")]
        [DefaultValue(ButtonType.Link)]
        public ButtonType NewButtonType
        {
            get
            {
                if(ViewState["_newButtonType"] == null) return ButtonType.Link;
                return (ButtonType)ViewState["_newButtonType"];
            }
            set { ViewState["_newButtonType"] = value; }
        }

        [DefaultValue(true)]
        [Category("Behavior")]
        public bool AllowNewButtonForTree
        {
            get { return (bool?)ViewState["_allowNewButtonForTree"] ?? true; }
            set { ViewState["_allowNewButtonForTree"] = value; }
        }

        [Category("TreeParameters")]
        [DefaultValue("refParent")]
        public string ParentColumn
        {
            get { return parentColumn; }
            set { parentColumn = value; }
        }

        [Category("TreeParameters")]
        [DefaultValue("id")]
        public string IdColumn
        {
            get { return idColumn; }
            set { idColumn = value; }
        }

        [Category("TreeParameters")]
        [DefaultValue("")]
        public string RelationName
        {
            get { return relationName; }
            set { relationName = value; }
        }

        [Category("TreeParameters")]
        [DefaultValue("")]
        public string ParentFindFieldValue
        {
            get { return parentFindFieldValue; }
            set { parentFindFieldValue = value; }
        }

        [Category("TreeParameters")]
        [DefaultValue(false)]
        public bool UseParentFindField
        {
            get { return (bool?)ViewState["useParentFindField"] ?? false; }
            set { ViewState["useParentFindField"] = value; }
        }

        [Category("TreeParameters")]
        [DefaultValue("")]
        public string ParentFindField
        {
            get { return parentFindField; }
            set { parentFindField = value; }
        }

        #endregion


        #region overrides, virtuals

        protected virtual void AddKeyExpandedRows(string keyValue, int pageIndex)
        {
            KeyExpandedIndexRows.Add(keyValue, pageIndex);
            KeyExpandedRows.Add(keyValue);
        }

        protected virtual void RemoveKeyExpandedRows(string keyValue)
        {
            bool prev = changingIndex;
            if(TableDataSourceView.HasNewRow)
                changingIndex = true;
            try
            {
                PageIndex = KeyExpandedIndexRows[keyValue];
                KeyExpandedIndexRows.Remove(keyValue);
                int index = KeyExpandedRows.IndexOf(keyValue);
                while (index < KeyExpandedRows.Count && KeyExpandedRows.Count > 0)
                {
                    int last = KeyExpandedRows.Count - 1;
                    KeyExpandedIndexRows.Remove(KeyExpandedRows[last]);
                    KeyExpandedRows.RemoveAt(last);
                }
            }
            finally
            {
                if (TableDataSourceView.HasNewRow)
                    changingIndex = prev;
            }
        }

        protected virtual Dictionary<string, int> KeyExpandedIndexRows
        {
            get
            {
                Dictionary<string, int> list = (Dictionary<string, int>)ViewState["KeyExpandedIndexRows"];
                if(list == null)
                {
                    list = new Dictionary<string, int>();
                    ViewState["KeyExpandedIndexRows"] = list;
                }
                return list;
            }
        }

        protected virtual List<string> KeyExpandedRows
        {
            get
            {
                List<string> list = (List<string>)ViewState["KeyExpandedRows"];
                if (list == null)
                {
                    list = new List<string>();
                    ViewState["KeyExpandedRows"] = list;
                }
                return list;
            }
        }

        protected virtual void OnPreRenderTree(EventArgs e)
        {
            /*if(Page != null && Visible && showAsTree)
                CurrentScriptManager.RegisterScriptControl(this);*/
        }

        /// <summary>
        /// Overrides GridView.CreateRow to create the custom rows in the grid (ExtGridViewRow).
        /// </summary>
        /// <param name="rowIndex"></param>
        /// <param name="dataSourceIndex"></param>
        /// <param name="rowType"></param>
        /// <param name="rowState"></param>
        /// <returns></returns>
        protected override GridViewRow CreateRow(int rowIndex, int dataSourceIndex, DataControlRowType rowType,
                                                 DataControlRowState rowState)
        {
//            if(showAsTree)
            {
                GridViewExtRow row = new GridViewExtRow(rowIndex, dataSourceIndex, rowType, rowState);
                if(rowType == DataControlRowType.DataRow)
                {
                    if(_data == null)
                    {
                        row.RowVisible = true;
                        row.Collapsed = false;
                        row.ShowExpand = false;
                    }
                    else if (!ShowAsTree)
                    {
                        var dataRowView = ((DataRowView)_data[dataSourceIndex]);
                        if (dataRowView[idColumn] != DBNull.Value)
                            row.ItemValue = dataRowView[idColumn].ToString();
                    }
                    else
                    {
                        var dataRowView = ((DataRowView)_data[dataSourceIndex]);
                        if (dataRowView[idColumn] != DBNull.Value)
                            row.ItemValue = dataRowView[idColumn].ToString();
                        if (dataRowView[parentColumn] != DBNull.Value)
                            row.ParentValue = dataRowView[parentColumn].ToString();

                        if(_stateRows != null && _stateRows.ContainsKey(row.ItemValue))
                        {
                            row.RowVisible = _stateRows[row.ItemValue].RowVisible;
                            row.Collapsed = _stateRows[row.ItemValue].Collapsed;
                        }
                        else
                        {
                            bool parentCollapsed = true;
                            if(_stateRows != null && row.ParentValue != null && _stateRows.ContainsKey(row.ParentValue))
                                parentCollapsed = _stateRows[row.ParentValue].Collapsed;
                            row.RowVisible = !bindingSource.Rows[dataRowView.Row].HasParentRow || !parentCollapsed;
                        }

                        // чтобы разварачивалась строка, где добавилаясь новая запись
                        if(TableDataSourceView.HasNewRow && TableDataSourceView.Current.Row.GetParentRow(relationName) == dataRowView.Row)
                            row.Collapsed = false;

                        if (AllowPaging && KeyExpandedIndexRows.ContainsKey(row.ItemValue))
                            row.Collapsed = false;

                        bool showExpand;
                        TreeRow bindingSourceRow = null;
                        if(bindingSource.Rows.ContainsKey(dataRowView.Row))
                            bindingSourceRow = bindingSource.Rows[dataRowView.Row];
                        if (bindingSourceRow != null)
                        {
                            showExpand = bindingSourceRow.Childs.Count > 0;
                            row.ShowExpand = showExpand;

                            if (bindingSourceRow.HasParentRow)
                            {
                                int level = 1;
                                DataRow parent = dataRowView.Row.GetParentRow(relationName);
                                while (parent != null && bindingSource.Rows[parent].HasParentRow)
                                {
                                    parent = parent.GetParentRow(relationName);
                                    level++;
                                }
                                row.Level = level;
                            }
                        }
                    }
                }
                return row;
            }
            return base.CreateRow(rowIndex, dataSourceIndex, rowType, rowState);
        }

        protected virtual void EnsureCorrectVisible()
        {
            if(_data != null && ShowAsTree)
            {
                //todo: сделать рекурсию на все строки

                for(int i = 0; i < Rows.Count; i++)
                    ((GridViewExtRow)Rows[i]).TableCell.RowVisible = true;
                for(int i = 0; i < Rows.Count; i++)
                    SetUnVisibleRows(ref i, true);
            }
        }

        private void SetUnVisibleRows(ref int index, bool visible)
        {
            int i = index;
//            if (((GridViewExtRow)Rows[i]).Collapsed)
            {
                GridViewExtRow row = (GridViewExtRow)Rows[i];
                string value = row.ItemValue;
                bool collapsed = row.TableCell.Collapsed;
                while (++i < _data.Count && i < Rows.Count)
                {
                    row = (GridViewExtRow)Rows[i];
                    if(row.ParentValue == value)
                    {
                        if(collapsed || !visible)
                            row.TableCell.RowVisible = false;
                        continue;
                    }
                    if(row.ParentValue == ((GridViewExtRow)Rows[i - 1]).ItemValue)
                    {
//                        if (((GridViewExtRow)Rows[i]).Collapsed || !visible)
//                            row.TableCell.RowVisible = false;
                        i--;
                        SetUnVisibleRows(ref i, !collapsed && visible);
                        continue;
                    }
                    break;
                }
                index = --i;
            }
        }

        protected override void Render(HtmlTextWriter writer)
        {
            EnsureCorrectVisible();

//            if(showAsTree)
            {
                Attributes["expandClass"] = _expandButtonCssClass;
                Attributes["collapseClass"] = _collapseButtonCssClass;
                Attributes["expandText"] = _expandButtonText;
                Attributes["collapseText"] = _collapseButtonText;
            }
//            Columns[GridColumnIndexes["fTree"]].Visible = showAsTree;
            base.Render(writer);
        }

        

        protected override int CreateChildControls(IEnumerable dataSource, bool dataBinding)
        {
            if (!DesignMode)
            {
                if (AllowLocalizationDicColumns && !(dataSource is object[]) && dataSource is DataView)
                    LocalizationHelper.ChangeColumnsExpression(((DataView)dataSource).Table);

                long time = DateTime.Now.Ticks;
                Debug.WriteLine(string.Format("GridViewExt.CreateChildControls {0}", DateTime.Now));
                try
                {
                    CreateEmptyColumnForTree();
                    if (Rows.Count > 0 && !AllowPaging)
                    {
                        _stateRows = new Dictionary<string, TemplateExpand>(Rows.Count);
                        if (Rows.Count > 0 && Rows[0] is GridViewExtRow)
                        {
                            foreach(GridViewExtRow row in Rows)
                            {
                                if (row.TableCell != null && !string.IsNullOrEmpty(row.TableCell.Item.Value))
                                    _stateRows.Add(row.TableCell.Item.Value, row.TableCell);
                            }
                        }
                    }
                    if (showAsTree)
                    {
                        Debug.WriteLine(
                            string.Format("GridViewExt.CreateChildControls._stateRows {0}", DateTime.Now.Ticks - time));
                        time = DateTime.Now.Ticks;

                        DataView view = dataSource as DataView;
                        if (view == null)
                        {
                            DataTable table = dataSource as DataTable;
                            if (table != null)
                                view = table.DefaultView;
                        }

                        Debug.WriteLine(
                            string.Format("GridViewExt.CreateChildControls.Sort {0}", DateTime.Now.Ticks - time));
                        time = DateTime.Now.Ticks;

                        if (view != null)
                        {
                            // используется viewParent чтоб не создовать еще одну вьюшку.
                            treeRowsExpanded = new List<TreeRow>();
                            TreeBindingSource source;
                            if (bindingSource != null)
                            {
                                source = bindingSource;
                            }
                            else
                            {
                                source = new TreeBindingSource();
                                source.ThrowExceptionOnCircleRef = false;
                                ((ISupportInitialize)source).BeginInit();
                                source.DataSource = view;
                                source.Relation = relationName;
                                source.IsTree = true;
                                ((ISupportInitialize)source).EndInit();
                            }
                            if (AllowPaging)
                            {
                                foreach (KeyValuePair<string, int> keyExpandedRow in KeyExpandedIndexRows)
                                {
                                    DataRow row = view.Table.Rows.Find(keyExpandedRow.Key);
                                    if (row != null)
                                    {
                                        if (source.Rows.ContainsKey(row))
                                        {
                                            TreeRow treeRow = source.Rows[row];
                                            treeRowsExpanded.Add(treeRow);
                                            treeRow.Collapsed = false;
                                        }
                                    }
                                }
                                // чтобы разварачивалась строка, где добавилаясь новая запись
                                if (TableDataSourceView.HasNewRow)
                                {
                                    DataRow parentRow = TableDataSourceView.Current.Row.GetParentRow(relationName);
                                    if (parentRow != null)
                                    {
                                        TreeRow treeRow = source.Rows[parentRow];
                                        treeRow.Collapsed = false;
                                        if (!treeRowsExpanded.Contains(treeRow))
                                            treeRowsExpanded.Add(treeRow);
                                        string keyValue = treeRow.Row[idColumn].ToString();
                                        if (!KeyExpandedIndexRows.ContainsKey(keyValue))
                                            AddKeyExpandedRows(keyValue, PageIndex);
                                    }
                                    else if (KeyExpandedRows.Count > 0)
                                    {
                                        RemoveKeyExpandedRows(KeyExpandedRows[0]);
                                    }
                                }
                            }
                            else if (!PostBackOnExpnad)
                                source.TreeList.ExpandAll();
                            else if (_stateRows != null)
                            {
                                DataRow parentRow = null;
                                if (TableDataSourceView.HasNewRow)
                                    parentRow = TableDataSourceView.Current.Row.GetParentRow(relationName);
                                foreach (KeyValuePair<string, TemplateExpand> pair in _stateRows)
                                {
                                    DataRow row;
                                    try
                                    {
                                        row = view.Table.Rows.Find(pair.Key);
                                    }
                                    catch (MissingPrimaryKeyException)
                                    {
                                        source.TreeList.ExpandAll();
                                        break;
                                    }
                                    if (row != null)
                                    {
                                        if (source.Rows.ContainsKey(row))
                                        {
                                            TreeRow treeRow = source.Rows[row];
                                            if (!pair.Value.Collapsed)
                                                treeRowsExpanded.Add(treeRow);
                                            treeRow.Collapsed = pair.Value.Collapsed;
                                        }
                                        // чтобы разварачивалась строка, где добавилаясь новая запись
                                        if (TableDataSourceView.HasNewRow && parentRow == row)
                                        {
                                            TreeRow treeRow = source.Rows[row];
                                            treeRow.Collapsed = false;
                                            treeRowsExpanded.Add(treeRow);
                                        }
                                    }
                                }
                            }
                            bindingSource = source;

                            if (!AllowPaging)
                                _data = source.List;
                            else
                            {
                                if (treeRowsExpanded.Count == 0)
                                {
                                    source.TreeList.CollapseAll();
                                    _data = source.List;
                                }
                                else
                                {
                                    List<DataRowView> list = new List<DataRowView>(source.List.Count);
                                    foreach (TreeRow treeRow in treeRowsExpanded)
                                        list.Add(treeRow.DataRowView);
                                    foreach (TreeRow treeRow in treeRowsExpanded[treeRowsExpanded.Count - 1].Childs)
                                        list.Add(treeRow.DataRowView);
                                    _data = list;
                                }
                            }

                            Debug.WriteLine(
                                string.Format(
                                    "GridViewExt.CreateChildControls.TreeBindingSource {0}",
                                    DateTime.Now.Ticks - time));
                            time = DateTime.Now.Ticks;

                            return base.CreateChildControls(_data, dataBinding);
                        }
                    }
                    else if (dataSource is DataView)
                    {
                        _data = (DataView)dataSource;
                    }
                }
                finally
                {
                    Debug.WriteLine(string.Format("GridViewExt.CreateChildControls.Complite {0}", DateTime.Now.Ticks - time));
                }
            }
            return base.CreateChildControls(dataSource, dataBinding);
        }

        protected override void RaisePostBackEvent(string eventArgument)
        {
            if (eventArgument != null && eventArgument.StartsWith(GridViewExtRow.expandConstPostBack))
            {
                if (eventArgument.Length > GridViewExtRow.expandConstPostBack.Length && AllowPaging)
                {
                    string key = eventArgument.Substring(GridViewExtRow.expandConstPostBack.Length);
                    if (KeyExpandedIndexRows.ContainsKey(key))
                        RemoveKeyExpandedRows(key);
                    else
                        AddKeyExpandedRows(key, PageIndex);
                }
                RequiresDataBinding = true;
                return;
            }
            base.RaisePostBackEvent(eventArgument);
        }

        protected override void OnRowCommand(GridViewCommandEventArgs e)
        {
            if(showAsTree && TableDataSourceView != null)
            {
                if("new".Equals(e.CommandName, StringComparison.OrdinalIgnoreCase))
                {
                    if(!UpdateCurrentRow()) return;
                    GridViewExtRow gridRow = (GridViewExtRow)fieldInfo_row.GetValue(e);
                    if(gridRow == null) rowIndexForCommand = Convert.ToInt32(e.CommandArgument);
                    else rowIndexForCommand = gridRow.RowIndex;
                    TableDataSourceView.AddingRow += TableDataSourceView_OnAddingRow;
                    TableDataSourceView.AddNewRow();
                    TableDataSourceView.AddingRow -= TableDataSourceView_OnAddingRow;
                    rowIndexForCommand = -1;
                }
            }
            base.OnRowCommand(e);
        }

        #endregion


        #region private methods

        private void CreateNewColumnForTree()
        {
            if(!DesignMode && showAsTree && AllowNewButtonForTree)
            {
                TemplateField field = new TemplateField();
                field.HeaderText = "";
                TemplateFieldNew fieldNew = new TemplateFieldNew();
                fieldNew.ButtonType = NewButtonType;
                field.ItemTemplate = fieldNew;
                fieldNew = new TemplateFieldNew();
                fieldNew.ButtonType = NewButtonType;
                field.EditItemTemplate = fieldNew;
                Columns.Add(field);
            }
        }

        private void CreateEmptyColumnForTree()
        {
            if(!DesignMode && /*showAsTree &&*/ !created)
            {
                created = true;
                TemplateFieldExpand field = new TemplateFieldExpand();
                field.HeaderText = "";
                field.ItemTemplate = new TemplateExpand();
                Columns.Insert(0, field);
//                field = new TemplateField();
//                field.HeaderText = "";
//                field.ItemTemplate = new TemplateBuilder();
//                Columns.Add(field);
            }
        }

        private void CreateCheckedColumn()
        {
            if(!DesignMode && UseDeleteField)
            {
                CheckedField checkedField = new CheckedField();
                checkedField.ColumnName = deleteFieldColumnName;
                checkedField.HeaderText = DeleteFieldColumnCaption;
                
                Columns.Insert(0, checkedField);
            }
        }

        private void TableDataSourceView_OnAddingRow(object sender, TableDataSourceAddingRowEventArgs e)
        {
            if (DataKeys.Count <= rowIndexForCommand)
            {
                e.Cancel = true;
                return;
            }
            e.Row[parentColumn] = DataKeys[rowIndexForCommand].Value;
        }

        private static int GetRowIndexByKey(DataKey values, DataKeyArray dataKeys, string[] dataKeyNames)
        {
            bool equal;
            for(int index = 0; index < dataKeys.Count; index++)
            {
                equal = true;
                for(int i = 0; i < dataKeyNames.Length; i++)
                {
                    if(values[i] != null && !values[i].Equals(dataKeys[index].Values[i]) ||
                       values[i] == null && values[i] != dataKeys[index].Values[i])
                    {
                        equal = false;
                        break;
                    }
                }
                if(equal) return index;
            }
            return -1;
        }

        #endregion

        #endregion

        
        #region IScriptControl

        public IEnumerable<ScriptDescriptor> GetScriptDescriptors()
        {
            throw new NotImplementedException();
        }

        public IEnumerable<ScriptReference> GetScriptReferences()
        {
            var references = new List<ScriptReference>();
            references.AddRange(ScriptObjectBuilder.GetScriptReferences(GetType()));
            return references;
        }

        #endregion


        #endregion
    }
}