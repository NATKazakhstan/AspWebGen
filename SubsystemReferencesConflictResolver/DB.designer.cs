#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SubsystemReferencesConflictResolver
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Default")]
	public partial class DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMON_RequestTable(MON_RequestTable instance);
    partial void UpdateMON_RequestTable(MON_RequestTable instance);
    partial void DeleteMON_RequestTable(MON_RequestTable instance);
    partial void InsertSYS_ReferencesConflictResolver(SYS_ReferencesConflictResolver instance);
    partial void UpdateSYS_ReferencesConflictResolver(SYS_ReferencesConflictResolver instance);
    partial void DeleteSYS_ReferencesConflictResolver(SYS_ReferencesConflictResolver instance);
    #endregion
		
		public DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MON_RequestTable> MON_RequestTables
		{
			get
			{
				return this.GetTable<MON_RequestTable>();
			}
		}
		
		public System.Data.Linq.Table<SYS_ReferencesConflictResolver> SYS_ReferencesConflictResolvers
		{
			get
			{
				return this.GetTable<SYS_ReferencesConflictResolver>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MON_RequestTables")]
	public partial class MON_RequestTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _TableName;
		
		private string _TableCode;
		
		private string _PackageCode;
		
		private string _PackageName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnTableNameChanging(string value);
    partial void OnTableNameChanged();
    partial void OnTableCodeChanging(string value);
    partial void OnTableCodeChanged();
    partial void OnPackageCodeChanging(string value);
    partial void OnPackageCodeChanged();
    partial void OnPackageNameChanging(string value);
    partial void OnPackageNameChanged();
    #endregion
		
		public MON_RequestTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this.OnTableNameChanging(value);
					this.SendPropertyChanging();
					this._TableName = value;
					this.SendPropertyChanged("TableName");
					this.OnTableNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableCode", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string TableCode
		{
			get
			{
				return this._TableCode;
			}
			set
			{
				if ((this._TableCode != value))
				{
					this.OnTableCodeChanging(value);
					this.SendPropertyChanging();
					this._TableCode = value;
					this.SendPropertyChanged("TableCode");
					this.OnTableCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageCode", DbType="NVarChar(255)")]
		public string PackageCode
		{
			get
			{
				return this._PackageCode;
			}
			set
			{
				if ((this._PackageCode != value))
				{
					this.OnPackageCodeChanging(value);
					this.SendPropertyChanging();
					this._PackageCode = value;
					this.SendPropertyChanged("PackageCode");
					this.OnPackageCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageName", DbType="NVarChar(255)")]
		public string PackageName
		{
			get
			{
				return this._PackageName;
			}
			set
			{
				if ((this._PackageName != value))
				{
					this.OnPackageNameChanging(value);
					this.SendPropertyChanging();
					this._PackageName = value;
					this.SendPropertyChanged("PackageName");
					this.OnPackageNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SYS_ReferencesConflictResolver")]
	public partial class SYS_ReferencesConflictResolver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _Code;
		
		private string _RegexSearch;
		
		private string _ConstraintName;
		
		private string _TableName;
		
		private string _ReferencesConflictResolverClass;
		
		private string _ErrorMessageRu;
		
		private string _ErrorMessageKz;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnRegexSearchChanging(string value);
    partial void OnRegexSearchChanged();
    partial void OnConstraintNameChanging(string value);
    partial void OnConstraintNameChanged();
    partial void OnTableNameChanging(string value);
    partial void OnTableNameChanged();
    partial void OnReferencesConflictResolverClassChanging(string value);
    partial void OnReferencesConflictResolverClassChanged();
    partial void OnErrorMessageRuChanging(string value);
    partial void OnErrorMessageRuChanged();
    partial void OnErrorMessageKzChanging(string value);
    partial void OnErrorMessageKzChanged();
    #endregion
		
		public SYS_ReferencesConflictResolver()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="bigint", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="nvarchar(250)", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegexSearch", DbType="nvarchar(250)")]
		public string RegexSearch
		{
			get
			{
				return this._RegexSearch;
			}
			set
			{
				if ((this._RegexSearch != value))
				{
					this.OnRegexSearchChanging(value);
					this.SendPropertyChanging();
					this._RegexSearch = value;
					this.SendPropertyChanged("RegexSearch");
					this.OnRegexSearchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConstraintName", DbType="nvarchar(250)")]
		public string ConstraintName
		{
			get
			{
				return this._ConstraintName;
			}
			set
			{
				if ((this._ConstraintName != value))
				{
					this.OnConstraintNameChanging(value);
					this.SendPropertyChanging();
					this._ConstraintName = value;
					this.SendPropertyChanged("ConstraintName");
					this.OnConstraintNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableName", DbType="nvarchar(250)")]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this.OnTableNameChanging(value);
					this.SendPropertyChanging();
					this._TableName = value;
					this.SendPropertyChanged("TableName");
					this.OnTableNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferencesConflictResolverClass", DbType="nvarchar(500)")]
		public string ReferencesConflictResolverClass
		{
			get
			{
				return this._ReferencesConflictResolverClass;
			}
			set
			{
				if ((this._ReferencesConflictResolverClass != value))
				{
					this.OnReferencesConflictResolverClassChanging(value);
					this.SendPropertyChanging();
					this._ReferencesConflictResolverClass = value;
					this.SendPropertyChanged("ReferencesConflictResolverClass");
					this.OnReferencesConflictResolverClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorMessageRu", DbType="nvarchar(250)")]
		public string ErrorMessageRu
		{
			get
			{
				return this._ErrorMessageRu;
			}
			set
			{
				if ((this._ErrorMessageRu != value))
				{
					this.OnErrorMessageRuChanging(value);
					this.SendPropertyChanging();
					this._ErrorMessageRu = value;
					this.SendPropertyChanged("ErrorMessageRu");
					this.OnErrorMessageRuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorMessageKz", DbType="nvarchar(250)")]
		public string ErrorMessageKz
		{
			get
			{
				return this._ErrorMessageKz;
			}
			set
			{
				if ((this._ErrorMessageKz != value))
				{
					this.OnErrorMessageKzChanging(value);
					this.SendPropertyChanging();
					this._ErrorMessageKz = value;
					this.SendPropertyChanged("ErrorMessageKz");
					this.OnErrorMessageKzChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
